Введение в Git

Что такое Git? Это система контроля версий. Попробуем понять это определение:

- как установить и настроить Git?
- что такое контроль версий?
- как он реализован в Git?
- что такое репозиторий?
- три состояния файлов, фиксация изменений
- лог изменений, хэши коммитов, понятие состояния репозитория
- использование git diff

Простые наглядные примеры позволят вам понять, как устроен Git, и вы поймете - как легко и просто им пользоваться! 

Домашняя работа

       1. Создайте репозиторий в пустой папке
       2. Добавьте в папку файл. Изучите вывод команды git status. Проиндексируйте файл командой git add. Снова посмотрите вывод git status. 
       3. Зафиксируйте изменения командой git commit.
       4. Сделайте и зафиксируйте следующие изменения (каждый подпункт - одна фиксация):
          -  Добавление сразу трех файлов
          -  Изменения в тексте двух файлов
          -  Изменения в тексте одного файла, удаление другого и добавление еще одного
       5.* Удалите из какой-либо подпапки все файлы и зафиксируйте это изменение (подпапку, конечно же, надо предварительно создать). А затем удалите и саму пустую подпапку. Объясните результат.
       6. Изучите вывод команды git log. Прочтите о ее различных ключах: https://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2
       7. * Создайте свой формат вывода git log с помощью ключа --pretty=format
       8. * Внесите изменения в репозиторий, но не фиксируйте их. Посмотрите git status. Теперь дайте команду git stash и снова посмотрите статус и свои файлы. А теперь git stash apply. Попробуйте объяснить результат, не прибегая к документации.

    Решением ДЗ служит ОДИН текстовый файл, в который вы запишете все использованные вами команды и их вывод в консоль.

    Задания, помеченные знаком "*" являются необязательными.
